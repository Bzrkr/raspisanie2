const dayNames = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
const IPEauditories = ["502-2 –∫.", "601-2 –∫.", "603-2 –∫.", "604-2 –∫.", "605-2 –∫.", "607-2 –∫.", "611-2 –∫.", "613-2 –∫.", "615-2 –∫."];

// –ü–æ—Ä—è–¥–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const timeSlotsOrder = [
    "09:00‚Äî10:20",
    "10:35‚Äî11:55",
    "12:25‚Äî13:45",
    "14:00‚Äî15:20",
    "15:50‚Äî17:10",
    "17:25‚Äî18:45",
    "19:00‚Äî20:20",
    "20:40‚Äî22:00"
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let currentWeekNumber = null;
let teachersData = null;
let teacherSchedulesData = null;

async function fetchJson(url) {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`HTTP error: ${response.status}`);
    }
    return response.json();
}

async function loadInitialData() {
    document.getElementById('loading').style.display = 'block';
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        currentWeekNumber = await fetchJson('https://iis.bsuir.by/api/v1/schedule/current-week');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        const teachers = await fetchJson('https://iis.bsuir.by/api/v1/employees/all');
        teachersData = teachers;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        teacherSchedulesData = {};
        const promises = teachers.map(async (teacher) => {
            try {
                const schedule = await fetchJson(`https://iis.bsuir.by/api/v1/employees/schedule/${teacher.urlId}`);
                teacherSchedulesData[teacher.urlId] = schedule;
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${teacher.fio}:`, error);
                teacherSchedulesData[teacher.urlId] = { schedules: {}, previousSchedules: {} };
            }
        });
        
        await Promise.all(promises);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const dd = String(today.getDate()).padStart(2, '0');
        document.getElementById('datePicker').value = `${yyyy}-${mm}-${dd}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
        const dayName = dayNames[today.getDay()]; 
        document.getElementById('weekDisplay').textContent = `${today.toLocaleDateString()} (${dayName}), ${currentWeekNumber}-—è —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è üóìÔ∏è`;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        await updateSchedule(today, currentWeekNumber);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

function calculateWeekNumber(selectedDate) {
    if (!currentWeekNumber) return null;
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const getMonday = (date) => {
        const day = date.getDay();
        const diff = date.getDate() - day + (day === 0 ? -6 : 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        return new Date(date.setDate(diff));
    };
    
    const currentMonday = getMonday(new Date(today));
    const selectedMonday = getMonday(new Date(selectedDate));
    
    // –†–∞–∑–Ω–∏—Ü–∞ –≤ –Ω–µ–¥–µ–ª—è—Ö –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π
    const diffTime = selectedMonday - currentMonday;
    const diffWeeks = Math.round(diffTime / (1000 * 60 * 60 * 24 * 7));
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —Å —É—á—ë—Ç–æ–º 4-–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    let weekNumber = ((currentWeekNumber - 1) + diffWeeks) % 4 + 1;
    return weekNumber <= 0 ? weekNumber + 4 : weekNumber;
}

function parseDate(dateStr) {
    if (!dateStr) return null;
    const parts = dateStr.split('.');
    return new Date(`${parts[2]}-${parts[1]}-${parts[0]}`);
}

function timeInRange(start, end, target) {
    return start <= target && target <= end;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
function isTimeInSlot(lessonStart, lessonEnd, slotStart, slotEnd) {
    const lessonStartTime = convertToMinutes(lessonStart);
    const lessonEndTime = convertToMinutes(lessonEnd);
    const slotStartTime = convertToMinutes(slotStart);
    const slotEndTime = convertToMinutes(slotEnd);
    
    // –ó–∞–Ω—è—Ç–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å—è—â–∏–º—Å—è –∫ —Å–ª–æ—Ç—É, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –Ω–∏–º
    return (lessonStartTime < slotEndTime && lessonEndTime > slotStartTime);
}
//–ó–∞–Ω—è—Ç–∏—è, –≤—ã—Ö–æ–¥—è—â–∏–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–ª–æ—Ç–µ. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ—Ç–∞–º, –≥–¥–µ –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ - —Ç–æ–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.
//function isTimeInSlot(lessonStart, lessonEnd, slotStart, slotEnd) {
  //  const lessonStartTime = convertToMinutes(lessonStart);
    //const lessonEndTime = convertToMinutes(lessonEnd);
    //const slotStartTime = convertToMinutes(slotStart);
    //const slotEndTime = convertToMinutes(slotEnd);
    
    // –ó–∞–Ω—è—Ç–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–æ—Ç—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–∞—á–∞–ª–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç
    //return (lessonStartTime >= slotStartTime && lessonStartTime < slotEndTime);
//}



// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
function convertToMinutes(timeStr) {
    const [hours, minutes] = timeStr.split(':').map(Number);
    return hours * 60 + minutes;
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getScheduleForAuditory
async function getScheduleForAuditory(auditory, date, weekNumber) {
    const schedule = {};
    const dayName = dayNames[date.getDay()];
    
    if (!teachersData || !teacherSchedulesData) return schedule;

    for (const teacher of teachersData) {
        const teacherSchedule = teacherSchedulesData[teacher.urlId] || {};
        
        for (const scheduleType of ['schedules', 'previousSchedules']) {
            const daySchedule = teacherSchedule[scheduleType]?.[dayName] || [];
            
            for (const lesson of daySchedule) {
                const weekNumbers = lesson?.weekNumber || [];
                
                if (lesson.auditories && lesson.auditories.includes(auditory) && 
                    Array.isArray(weekNumbers) && weekNumbers.includes(weekNumber)) {
                    
                    const startDate = parseDate(lesson.startLessonDate);
                    const endDate = parseDate(lesson.endLessonDate);
                    const lessonDate = parseDate(lesson.dateLesson);
                    
                    if ((startDate && endDate && timeInRange(startDate, endDate, date)) || 
                        (lessonDate && date.toDateString() === lessonDate.toDateString())) {
                        
                        const lessonStartTime = lesson.startLessonTime;
                        const lessonEndTime = lesson.endLessonTime;
                        
                        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –∑–∞–Ω—è—Ç–∏–µ–º
                        for (const timeSlot of timeSlotsOrder) {
                            const [slotStart, slotEnd] = timeSlot.split('‚Äî');
                            
                            if (isTimeInSlot(lessonStartTime, lessonEndTime, slotStart, slotEnd)) {
                                if (!schedule[timeSlot]) {
                                    schedule[timeSlot] = [];
                                }
                                schedule[timeSlot].push({
                                    subject: lesson.subject,
                                    type: lesson.lessonTypeAbbrev,
                                    teacher: teacher.fio,
                                    groups: lesson.studentGroups?.map(g => g.name) || [],
                                    startTime: lessonStartTime,
                                    endTime: lessonEndTime
                                });
                            }
                        }
                    }
                }
            }
        }
    }
    
    return schedule;
}

async function updateSchedule(date, weekNumber) {
    if (!weekNumber) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏');
        return;
    }

    document.getElementById('loading').style.display = 'block';
    try {
        const schedulesContainer = document.getElementById('schedules');
        schedulesContainer.innerHTML = '';
        
        const promises = IPEauditories.map(async (auditory) => {
            const schedule = await getScheduleForAuditory(auditory, date, weekNumber);
            return { auditory, schedule };
        });
        
        const results = await Promise.all(promises);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        for (const timeSlot of timeSlotsOrder) {
            const timeSlotContainer = document.createElement('div');
            timeSlotContainer.className = 'time-slot';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            const timeHeader = document.createElement('div');
            timeHeader.className = 'time-header';
            timeHeader.textContent = timeSlot;
            timeSlotContainer.appendChild(timeHeader);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            for (const result of results) {
                const lessons = result.schedule[timeSlot];
                if (lessons && lessons.length > 0) {
                    const audContainer = document.createElement('div');
                    audContainer.className = 'auditory';
                    audContainer.innerHTML = `${result.auditory}`;
                    
                    for (const lesson of lessons) {
                        const lessonDiv = document.createElement('div');
                        lessonDiv.className = 'lesson';
                        
                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–Ω—è—Ç–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
                        const groupsText = lesson.groups.length > 0 
                            ? lesson.groups.map(g => 
                                `<a href="https://iis.bsuir.by/schedule/${g}" target="_blank" class="group-link">–≥—Ä. ${g}</a>`
                              ).join(', ')
                            : '–Ω–µ—Ç –≥—Ä—É–ø–ø—ã';
                        
                        // –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ updateSchedule, –≤ —á–∞—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è lessonDiv:
lessonDiv.innerHTML = `
    <div class="lesson-time">${lesson.startTime}‚Äî${lesson.endTime}</div>
    <div class="lesson-content">
        ${lesson.subject} (${lesson.type})
        ${lesson.teacher}
        ${groupsText}
    </div>
`;
                        audContainer.appendChild(lessonDiv);
                    }
                    
                    timeSlotContainer.appendChild(audContainer);
                }
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (timeSlotContainer.children.length > 1) {
                schedulesContainer.appendChild(timeSlotContainer);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –±–µ–∑ –∑–∞–Ω—è—Ç–∏–π
        const emptyAuditories = results.filter(r => Object.keys(r.schedule).length === 0);
        if (emptyAuditories.length > 0) {
            const emptyContainer = document.createElement('div');
            emptyContainer.className = 'empty-auditories';
            
            const emptyHeader = document.createElement('div');
            emptyHeader.className = 'empty-header';
            emptyHeader.textContent = '–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç';
            emptyContainer.appendChild(emptyHeader);
            
            for (const empty of emptyAuditories) {
                const audDiv = document.createElement('div');
                audDiv.className = 'auditory';
                audDiv.textContent = empty.auditory;
                emptyContainer.appendChild(audDiv);
            }
            
            schedulesContainer.appendChild(emptyContainer);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

function copyAndSend() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ weekDisplay
    const weekDisplayText = document.getElementById('weekDisplay').innerText;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ schedules
    const schedulesText = document.getElementById('schedules').innerText;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–æ–º (–¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏)
    const textToCopy = `${weekDisplayText}\n\n${schedulesText}`;
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    navigator.clipboard.writeText(textToCopy).then(() => {
        alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const telegramLink = `tg://msg?text=${encodeURIComponent(textToCopy)}`;
        window.open(telegramLink, '_blank');
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: ', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    loadInitialData();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
    document.getElementById('datePicker').addEventListener('change', async (e) => {
        const selectedDate = new Date(e.target.value);
        selectedDate.setHours(0, 0, 0, 0);
        
        const weekNumber = calculateWeekNumber(selectedDate);
        const dayName = dayNames[selectedDate.getDay()]; 
        document.getElementById('weekDisplay').textContent = `${selectedDate.toLocaleDateString()} (${dayName}), ${weekNumber}-—è —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è üóìÔ∏è`;
        
        await updateSchedule(selectedDate, weekNumber);
    });
});
